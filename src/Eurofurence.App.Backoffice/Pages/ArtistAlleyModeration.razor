@page "/artistAlleyModeration"
@using Eurofurence.App.Backoffice.Components
@using Eurofurence.App.Backoffice.Services
@using Eurofurence.App.Domain.Model.ArtistsAlley
@using Microsoft.AspNetCore.Authorization
@using Color = MudBlazor.Color

@attribute [Authorize(Roles = "ArtistAlleyModerator")]

@inject IArtistAlleyService TableRegService
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudToolBar>
    <MudText Typo="Typo.h6">Artist Alley Moderation</MudText>
    <MudSpacer/>
    <MudSpacer/>
    <MudTextField T="string" ValueChanged="Search" Label="Search" Variant="Variant.Outlined" Margin="Margin.Dense"
                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary"/>
</MudToolBar>
@*
Table showing the basic informations for each application.

More data of the applicant shall be visble an extra dialog TODO: Needs to be done
 *@
<MudDataGrid T="TableRegistrationRecord" @ref="_dataGrid" ServerData="@GetRegistrations" FilterMode="@_filterMode">
    <ToolBarContent>
        <MudTextField @bind-Value="_imageSearch" Placeholder="Search" Adornment="Adornment.Start" Immediate="true"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <Columns>
        <TemplateColumn Title="Preview" CellClass="d-flex justify-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(@context.Item.Image.Url))
                {
                    <MudLink Href="@context.Item.Image.Url">
                        <MudImage Class="ml-2" Width="100" Height="100" ObjectFit="ObjectFit.Contain"
                                  Src="@context.Item.Image.Url"/>
                    </MudLink>
                }
                else
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true"/>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Title="Applicant's Username" Property="arg => arg.OwnerUsername"/>
        <PropertyColumn Title="Applicant's Name" Property="arg => arg.DisplayName"/>
        <PropertyColumn Title="Applicant's Location" Property="arg => arg.Location"/>
        <PropertyColumn Title="Applicant's Descriptions" Property="arg => arg.ShortDescription"/>
        <PropertyColumn Property="arg => arg.DisplayName"/>
        <TemplateColumn>
            <CellTemplate>
                <MudButton OnClick="() => OpenMore(context.Item)">More</MudButton>
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn Title="Status" SortBy="@(x => x.State)" Sortable="true" Filterable="true">
            <CellTemplate>
                @switch (context.Item.State)
                {
                    case TableRegistrationRecord.RegistrationStateEnum.Pending:
                        <MudButton StartIcon="@Icons.Material.Filled.CheckCircle" @onclick="() => TryChangeRegistrationStatus(context.Item, false)">Approve</MudButton>
                        <MudButton StartIcon="@Icons.Material.Filled.Cancel" @onclick="() => TryChangeRegistrationStatus(context.Item, true)">Reject</MudButton>
                        break;
                    case TableRegistrationRecord.RegistrationStateEnum.Accepted:
                        <MudAlert Severity="Severity.Success">Accepted</MudAlert>
                        break;
                    case TableRegistrationRecord.RegistrationStateEnum.Rejected:
                        <MudAlert Severity="Severity.Error">Rejected</MudAlert>
                        break;
                    case TableRegistrationRecord.RegistrationStateEnum.Published:
                        <MudAlert Severity="Severity.Success">Published</MudAlert>
                        break;
                }

            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TableRegistrationRecord"/>
    </PagerContent>
</MudDataGrid>

@code {

    #region Attributes

    private MudDataGrid<TableRegistrationRecord>? _dataGrid;

    private string? _imageSearch;

    private DataGridFilterMode _filterMode = DataGridFilterMode.Simple;

    #endregion

    /// <summary>
    /// Attempt to change the status of a table registration
    /// </summary>
    /// <param name="registrationRecord"></param>
    /// <param name="reject"></param>
    private async void TryChangeRegistrationStatus(TableRegistrationRecord registrationRecord, bool reject)
    {
        DialogParameters<ConfirmDialog> dialog = new()
        {
            { x => x.ContentText, $"Are you sure, that you want to {(reject ? "Reject" : "Approve")} this application" },
            { x => x.ActionButtonText, "Confirm" }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        IDialogReference dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Confirm", dialog, options);
        DialogResult result = await dialogRef.Result;

        if (!result.Canceled)
        {
            await TableRegService.PutTableRegistrationStatusAsync(registrationRecord, reject ? TableRegistrationRecord.RegistrationStateEnum.Rejected : TableRegistrationRecord.RegistrationStateEnum.Accepted);
            await _dataGrid.ReloadServerData();
            Snackbar.Add($"Application was {(reject ? "Rejected" : "Approved")}");
        }
    }


    private async Task OpenMore(TableRegistrationRecord contextItem)
    {
        var dialog = new DialogParameters<ArtistAlleyApplicationDialog>()
        {
            { x => x.Record, contextItem }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true,CloseButton = true};

        DialogService.ShowAsync<ArtistAlleyApplicationDialog>("Application Details", dialog, options);
    }


    /// <summary>
    /// Filter
    /// </summary>
    /// <param name="entries"></param>
    /// <returns></returns>
    private IEnumerable<TableRegistrationRecord> Filter(IEnumerable<TableRegistrationRecord> entries) =>
        string.IsNullOrEmpty(_imageSearch) ? entries : entries.Where(x => x.DisplayName.Contains(_imageSearch, StringComparison.OrdinalIgnoreCase));


    /// <summary>
    /// Requests the table registrations from <see cref="IArtistAlleyService"/>
    /// </summary>
    /// <param name="gridState"></param>
    /// <returns></returns>
    private async Task<GridData<TableRegistrationRecord>> GetRegistrations(GridState<TableRegistrationRecord> gridState)
    {
        IEnumerable<TableRegistrationRecord> registrations = await TableRegService.GetTableRegistrationsAsync();

        // Show pending applications fist.
        // Sorting may be changed by the user in the UI.
        registrations = registrations
            .Select(x => x)
            .OrderBy(x => x.State)
            .ToList();

        registrations = Filter(registrations);

        GridData<TableRegistrationRecord> result = new();
        result.Items = registrations;
        //result.TotalItems = registrations.Count;
        return result;
    }

    private void Search(string searchString)
    {
        _imageSearch = searchString;
        _dataGrid.ReloadServerData();
    }


}
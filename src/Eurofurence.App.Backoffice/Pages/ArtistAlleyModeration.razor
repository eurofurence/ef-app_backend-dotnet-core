@page "/artistAlleyModeration"
@using Eurofurence.App.Backoffice.Components
@using Eurofurence.App.Backoffice.Services
@using Eurofurence.App.Domain.Model.ArtistsAlley
@using Microsoft.AspNetCore.Authorization
@using Color = MudBlazor.Color

@attribute [Authorize(Policy = "RequireArtistAlleyModerator")]

@inject IArtistAlleyService TableRegService
@inject IDialogService DialogService
@inject ISnackbar Snackbar


<MudToolBar>
    <MudText Typo="Typo.h6">Artist Alley Moderation</MudText>
    <MudSpacer/>
    <MudSpacer/>
    <MudTextField T="string" ValueChanged="Search" Label="Search" Variant="Variant.Outlined" Margin="Margin.Dense"
                  Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary"/>
</MudToolBar>
@*
Table showing the basic informations for each application.

More data of the applicant shall be visble an extra dialog
*@
<MudDataGrid T="TableRegistrationRecord" @ref="_dataGrid" Items="_items" Filterable="true"
             FilterMode="@DataGridFilterMode.ColumnFilterMenu">
    <Columns>
        <TemplateColumn Title="Preview" CellClass="justify-center">
            <CellTemplate>
                @if (context.Item.Image != null && !string.IsNullOrEmpty(context.Item.Image.Url))
                {
                    <MudLink Href="@context.Item.Image.Url">
                        <MudImage Class="ml-2" Width="100" Height="100" ObjectFit="ObjectFit.Contain"
                                  Src="@context.Item.Image.Url"/>
                    </MudLink>
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Title="Applicant's Username" Property="arg => arg.OwnerUsername" Filterable="false"/>
        <PropertyColumn Title="Applicant's Name" Property="arg => arg.DisplayName" Filterable="false"/>
        <PropertyColumn Title="Applicant's Location" Property="arg => arg.Location" Filterable="false"/>
        <PropertyColumn Title="Applicant's Descriptions" Property="arg => arg.ShortDescription" Filterable="false"/>
        <PropertyColumn Title="Submitted" Property="arg => arg.CreatedDateTimeUtc" Filterable="true" Format="yyyy-MM-dd HH:mm:ss zzz"/>
        <TemplateColumn Context="context2" Title="Status" Filterable="true" ShowFilterIcon="true">
            <FilterTemplate>
                @* <MudIconButton OnClick="@OpenFilter" Icon="@_icon" Size="@Size.Small" /> *@
                @* <MudOverlay Visible="@_filterOpen" OnClick="@(() => _filterOpen = false)" /> *@
                <MudPopover Open="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter"
                            Style="width:150px">
                    <MudStack Spacing="0">
                        <MudStack Spacing="0" Style="overflow-y:auto;max-height:250px">
                            @foreach (var item in Enum.GetValues(typeof(TableRegistrationRecord.RegistrationStateEnum)).Cast<TableRegistrationRecord.RegistrationStateEnum>())
                            {
                                <MudCheckBox T="bool" Label="@($"{item.ToString()}")" Size="@Size.Small" Value="@(_selectedStatusFilterItems.Contains(item))"
                                             ValueChanged="@((value) => OnSelectStatusFilter(value, item, context2))"/>
                            }
                        </MudStack>
                        <MudStack Row="true">
                        </MudStack>
                    </MudStack>
                </MudPopover>
            </FilterTemplate>
            <CellTemplate>
                <MudContainer MaxWidth="MaxWidth.Small">
                    <MudGrid Class="justify-center">
                        <MudItem xs="12" Style="text-align: center;">
                            @switch (context2.Item?.State)
                            {
                                case TableRegistrationRecord.RegistrationStateEnum.Pending:
                                    <MudButtonGroup OverrideStyles="false" Vertical="true">
                                        <MudButton Variant="Variant.Outlined" Color="Color.Success" StartIcon="@Icons.Material.Filled.CheckCircle" ref="appBtn"
                                                   OnClick="args => TryChangeRegistrationStatus(context2.Item, false)">
                                            Approve
                                        </MudButton>
                                        <MudButton Variant="Variant.Outlined" Color="Color.Warning" StartIcon="@Icons.Material.Filled.Cancel"
                                                   OnClick="args => TryChangeRegistrationStatus(context2.Item, true)">
                                            Reject
                                        </MudButton>
                                        @*Show the delete button only for admins*@
                                        <AuthorizeView Policy="RequireArtistAlleyAdmin">
                                            <Authorized>
                                                <MudButton Variant="Variant.Outlined" Color="Color.Error" StartIcon="@Icons.Material.Filled.Delete"
                                                           OnClick="args => DeleteRegistration(context2.Item)">
                                                    Delete
                                                </MudButton>
                                            </Authorized>
                                        </AuthorizeView>
                                    </MudButtonGroup>
                                    break;
                                case TableRegistrationRecord.RegistrationStateEnum.Accepted:
                                    <MudAlert Severity="Severity.Success">Accepted</MudAlert>
                                    break;
                                case TableRegistrationRecord.RegistrationStateEnum.Rejected:
                                    <MudAlert Severity="Severity.Error">Rejected</MudAlert>
                                    break;
                                case TableRegistrationRecord.RegistrationStateEnum.Published:
                                    <MudAlert Severity="Severity.Success">Published</MudAlert>
                                    break;
                            }
                            <MudButton StartIcon="@Icons.Material.Filled.Menu"
                                       OnClick="() => OpenMoreDialog(context2.Item)">
                                Details
                            </MudButton>
                        </MudItem>
                    </MudGrid>
                </MudContainer>
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="TableRegistrationRecord"/>
    </PagerContent>
</MudDataGrid>

@code {

    #region Attributes
    /// <summary>
    /// Instance of the data grid
    /// </summary>
    private MudDataGrid<TableRegistrationRecord>? _dataGrid;
    private IEnumerable<TableRegistrationRecord> _items = new List<TableRegistrationRecord>();

    private string? _search;

    /// <summary>
    /// A list of all selected status filter options
    /// </summary>
    HashSet<TableRegistrationRecord.RegistrationStateEnum> _selectedStatusFilterItems = new();


    private FilterDefinition<TableRegistrationRecord> _statusFilterDefinition;

    #endregion

    #region Methods

    private async void OnSelectStatusFilter(bool value, TableRegistrationRecord.RegistrationStateEnum item, FilterContext<TableRegistrationRecord> context)
    {
        if (value)
            _selectedStatusFilterItems.Add(item);
        else
            _selectedStatusFilterItems.Remove(item);

        await context.Actions.ApplyFilterAsync(_statusFilterDefinition);
    }

    protected override async Task OnInitializedAsync()
    {
        _statusFilterDefinition = new FilterDefinition<TableRegistrationRecord>
        {
            FilterFunction = x => _selectedStatusFilterItems.Contains(x.State) || !_selectedStatusFilterItems.Any()
        };

        _items = await GetRegistrationsAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            _dataGrid?.SetSortAsync(nameof(TableRegistrationRecord.State), SortDirection.Ascending, x => x.State);
        }
    }

    private async Task DeleteRegistration(TableRegistrationRecord registrationRecord)
    {
        DialogParameters<ConfirmDialog> dialog = new()
        {
            { x => x.ContentText, $"Are you sure you want to delete this application?" },
            { x => x.ActionButtonText, "Confirm" }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        IDialogReference dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Confirm", dialog, options);
        DialogResult? result = await dialogRef.Result;

        if (result is { Canceled: false })
        {
            await TableRegService.DeleteTableRegistrationAsync(registrationRecord);
            _items = await GetRegistrationsAsync();
            StateHasChanged();
            Snackbar.Add("Application Deleted", Severity.Success);
        }
    }

    /// <summary>
    /// Attempt to change the status of a table registration
    /// </summary>
    /// <param name="registrationRecord"></param>
    /// <param name="reject">True if the application should be rejected and false if it should be accepted</param>
    private async void TryChangeRegistrationStatus(TableRegistrationRecord registrationRecord, bool reject)
    {
        DialogParameters<ConfirmDialog> dialog = new()
        {
            { x => x.ContentText, $"Are you sure you want to {(reject ? "reject" : "approve")} this application?" },
            { x => x.ActionButtonText, "Confirm" }
        };
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        IDialogReference dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Confirm", dialog, options);
        DialogResult? result = await dialogRef.Result;

        if (result is { Canceled: false })
        {
            await TableRegService.PutTableRegistrationStatusAsync(registrationRecord, reject ? TableRegistrationRecord.RegistrationStateEnum.Rejected : TableRegistrationRecord.RegistrationStateEnum.Accepted);
            _items = await GetRegistrationsAsync();
            StateHasChanged();
            Snackbar.Add($"Application was {(reject ? "rejected" : "approved")}.", Severity.Success);
        }
    }

    /// <summary>
    /// Opens a dialog
    /// </summary>
    /// <param name="contextItem"></param>
    private async Task OpenMoreDialog(TableRegistrationRecord contextItem)
    {
        var parameters = new DialogParameters<ArtistAlleyApplicationDialog>()
        {
            { x => x.Record, contextItem }
        };

        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true, CloseButton = true };

        var dialog = await DialogService.ShowAsync<ArtistAlleyApplicationDialog>("Application Details", parameters, options);

        await dialog.Result;

        _items = await GetRegistrationsAsync();
        StateHasChanged();
    }


    /// <summary>
    /// Filter
    /// </summary>
    /// <param name="entries"></param>
    /// <returns></returns>
    private IEnumerable<TableRegistrationRecord> Filter(IEnumerable<TableRegistrationRecord> entries) =>
        string.IsNullOrEmpty(_search)
            ? entries
            : entries.Where(x => x.DisplayName.Contains(_search, StringComparison.OrdinalIgnoreCase)
                                 || x.OwnerUsername.Contains(_search, StringComparison.OrdinalIgnoreCase)
                                 || x.Location.Contains(_search, StringComparison.OrdinalIgnoreCase)
                                 || x.ShortDescription.Contains(_search, StringComparison.OrdinalIgnoreCase));


    /// <summary>
    /// Requests the table registrations from <see cref="IArtistAlleyService"/>
    /// </summary>
    /// <returns></returns>
    private async Task<IEnumerable<TableRegistrationRecord>> GetRegistrationsAsync()
    {
        IEnumerable<TableRegistrationRecord> registrations = await TableRegService.GetTableRegistrationsAsync();

        // Show pending applications fist.
        // Sorting may be changed by the user in the UI.
        registrations = registrations
            .Select(x => x)
            .OrderBy(x => x.State)
            .ToList();

        registrations = Filter(registrations);

        return registrations;
    }

    private async void Search(string searchString)
    {
        _search = searchString;
        _items = await GetRegistrationsAsync();
    }

    #endregion

}

@page "/images"
@attribute [Authorize(Roles = "Admin")]
@using Eurofurence.App.Backoffice.Services
@using Microsoft.AspNetCore.Authorization
@using Eurofurence.App.Domain.Model.Images
@using Eurofurence.App.Backoffice.Components
@inject ISnackbar Snackbar
@inject IImageService ImageService
@inject IDialogService DialogService

<MudToolBar>
    <MudText Typo="Typo.h6">Images</MudText>
    <MudSpacer />
    <MudSpacer />
    <MudTextField T="string" ValueChanged="Search" Label="Search" Variant="Variant.Outlined" Margin="Margin.Dense"
        Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Secondary" />
    <MudButton Class="ml-4" Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
        @onclick="AddImage">New image</MudButton>
</MudToolBar>
<MudDataGrid T="ImageWithRelationsResponse" @ref="_dataGrid" LoadingProgressColor="Color.Primary"
    ServerData="@GetImages" SortMode="@SortMode.None" Groupable="false">
    <Columns>
        <TemplateColumn Title="Preview" CellClass="d-flex justify-center">
            <CellTemplate>
                @if (!string.IsNullOrEmpty(@context.Item.Url))
                {
                    <MudLink Href="@context.Item.Url">
                        <MudImage Class="ml-2" Width="100" Height="100" ObjectFit="ObjectFit.Contain"
                            Src="@context.Item.Url" />
                    </MudLink>
                }
                else
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
            </CellTemplate>
        </TemplateColumn>
        <PropertyColumn Title="ID" Property="image => image.Id" />
        <PropertyColumn Title="Name" Property="image => image.InternalReference" />
        <PropertyColumn Title="Size (Bytes)" Property="image => image.SizeInBytes" />
        <PropertyColumn Title="Last Changed" Property="image => image.LastChangeDateTimeUtc" />
        <TemplateColumn Title="Usage">
            <CellTemplate>
                @if (context.Item?.FursuitBadgeIds.Count > 0)
                {
                    <MudTooltip Text="Fursuit Badges">
                        <MudIcon Icon="@Icons.Material.Outlined.Badge"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item?.TableRegistrationIds.Count > 0)
                {
                    <MudTooltip Text="Table Registrations">
                        <MudIcon Icon="@Icons.Material.Outlined.TableRestaurant"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item?.KnowledgeEntryIds.Count > 0)
                {
                    <MudTooltip Text="Knowledge Base">
                        <MudIcon Icon="@Icons.Material.Outlined.Info"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item?.MapIds.Count > 0)
                {
                    <MudTooltip Text="Maps">
                        <MudIcon Icon="@Icons.Material.Outlined.Map"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item?.DealerArtPreviewIds.Count > 0 || context.Item?.DealerArtistIds.Count > 0 ||
                context.Item?.DealerArtistThumbnailIds.Count > 0)
                {
                    <MudTooltip Text="Dealers Den">
                        <MudIcon Icon="@Icons.Material.Outlined.ShoppingCart"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item?.EventBannerIds.Count > 0 || context.Item?.EventPosterIds.Count > 0)
                {
                    <MudTooltip Text="Events">
                        <MudIcon Icon="@Icons.Material.Outlined.Event"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item?.AnnouncementIds.Count > 0)
                {
                    <MudTooltip Text="Announcements">
                        <MudIcon Icon="@Icons.Material.Outlined.Announcement"></MudIcon>
                    </MudTooltip>
                }
                @if (context.Item is { IsRestricted: true })
                {
                    <MudTooltip Text="Restricted">
                        <MudIcon Icon="@Icons.Material.Outlined.Block"></MudIcon>
                    </MudTooltip>
                }
            </CellTemplate>
        </TemplateColumn>
        <TemplateColumn>
            <CellTemplate>
                @if (context.Item != null)
                {
                    <MudIconButton Icon="@Icons.Material.Filled.Edit" @onclick="() => UpdateImage(context.Item)">
                    </MudIconButton>
                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteImage(@context.Item.Id))" />
                }
            </CellTemplate>
        </TemplateColumn>
    </Columns>
    <PagerContent>
        <MudDataGridPager T="ImageWithRelationsResponse" />
    </PagerContent>
</MudDataGrid>


@code {
    private string? _imageSearch;
    private List<ImageWithRelationsResponse> _images = new();
    private MudDataGrid<ImageWithRelationsResponse>? _dataGrid;

    private async Task<GridData<ImageWithRelationsResponse?>> GetImages(GridState<ImageWithRelationsResponse?> gridState)
    {
        if (!_images.Any())
        {
            await LoadImagesAsync();
        }

        var result = new GridData<ImageWithRelationsResponse?>();
        var filteredItems = FilterImages(_images, _imageSearch).ToList();
        result.Items = filteredItems.Skip(gridState.Page * gridState.PageSize).Take(gridState.PageSize);
        result.TotalItems = filteredItems.Count;
        return result;
    }

    private async Task LoadImagesAsync()
    {
        _images = (await ImageService.GetImagesWithRelationsAsync()).ToList();
        foreach (var image in _images)
        {
            image.Url += "?" + Guid.NewGuid();
        }
    }

    private void Search(string searchString)
    {
        _imageSearch = searchString;
        _dataGrid?.ReloadServerData();
    }

    private IEnumerable<ImageWithRelationsResponse> FilterImages(IEnumerable<ImageWithRelationsResponse> entries, string?
    searchString)
    {
        return string.IsNullOrEmpty(searchString)
            ? entries
            : entries.Where(entry =>
                entry.InternalReference.ToLower().Contains(searchString.ToLower())
                || entry.Id.ToString().ToLower().Contains(searchString.ToLower()));
    }

    private async Task AddImage()
    {
        var parameters = new DialogParameters<ImageDialog> { { x => x.Record, null } };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<ImageDialog>("New image", parameters, options);

        await dialog.Result;

        await LoadImagesAsync();
        StateHasChanged();
        _dataGrid?.ReloadServerData();
    }

    private async Task UpdateImage(ImageWithRelationsResponse record)
    {
        var parameters = new DialogParameters<ImageDialog> { { x => x.Record, record } };
        var options = new DialogOptions { MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<ImageDialog>("Update image", parameters, options);
        await dialog.Result;

        await LoadImagesAsync();
        StateHasChanged();
        _dataGrid?.ReloadServerData();
    }

    private async Task DeleteImage(Guid id)
    {
        DialogParameters<ConfirmDialog> dialog = new()
        {
            { x => x.ContentText, $"Are you sure you want to delete this ímage?" },
            { x => x.ActionButtonText, "Confirm" }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        IDialogReference dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Confirm", dialog, options);
        DialogResult? dialogResult = await dialogRef.Result;

        if (dialogResult is { Canceled: false })
        {
            var result = await ImageService.DeleteImageAsync(id);
            if (result)
            {
                Snackbar.Add("Image deleted.", Severity.Success);
                await LoadImagesAsync();
                _dataGrid?.ReloadServerData();
            }
            else
            {
                Snackbar.Add("Error deleting image.", Severity.Error);
            }
        }
    }

}
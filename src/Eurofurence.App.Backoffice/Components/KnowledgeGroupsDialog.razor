@using Eurofurence.App.Backoffice.Services
@using Eurofurence.App.Domain.Model.Knowledge
@inject ISnackbar Snackbar
@inject IKnowledgeService KnowledgeService
@inject IDialogService DialogService

<MudDialog>
    <DialogContent>
        @if (Loading)
        {
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7"/>
        }
        
        <MudDataGrid T="KnowledgeGroupResponse" Items="_knowledgeGroups">
            <ToolBarContent>
                <MudText Typo="Typo.h6">Groups</MudText>
                <MudSpacer/>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add"
                           @onclick="AddKnowledgeGroup">
                    New Group
                </MudButton>
            </ToolBarContent>
            <Columns>
                <TemplateColumn Title="Order Nr">
                    <CellTemplate>
                        @if (context.Item != null)
                        {
                            <MudChip T="string" Size="Size.Small" Color="Color.Secondary">@("#" + context.Item.Order)</MudChip>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <TemplateColumn Title="Icon">
                    <CellTemplate>
                        @if (context.Item != null && !string.IsNullOrEmpty(context.Item.FontAwesomeIconName))
                        {
                            <MudIcon Class="d-flex align-center justify-center" Icon="@("fas fa-" + context.Item.FontAwesomeIconName)"></MudIcon>
                        }
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => x.Description" />
                <TemplateColumn StickyRight="true">
                    <CellTemplate>
                        @if (context.Item != null)
                        {
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           @onclick="() => UpdateKnowledgeGroup(context.Item)">
                            </MudIconButton>
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           @onclick="() => DeleteKnowledgeGroup(context.Item.Id)">
                            </MudIconButton>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
            <PagerContent>
                <MudDataGridPager T="KnowledgeGroupResponse" />
            </PagerContent>
        </MudDataGrid>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Close">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    public bool Loading = true;
    private List<KnowledgeGroupResponse> _knowledgeGroups = [];

    protected override async Task OnInitializedAsync()
    {
        await LoadKnowledgeGroups();
    }

    private async Task LoadKnowledgeGroups()
    {
        Loading = true;
        _knowledgeGroups = (await KnowledgeService.GetKnowledgeGroupsAsync()).OrderBy(kg => kg.Order).ToList();
        Loading = false;
    }

    private async Task AddKnowledgeGroup()
    {
        var parameters = new DialogParameters<KnowledgeGroupDialog> { { x => x.Record, null } };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<KnowledgeGroupDialog>("New knowledge base group", parameters, options);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            Loading = true;
            await LoadKnowledgeGroups();
        }
    }

    private async Task UpdateKnowledgeGroup(KnowledgeGroupResponse record)
    {
        var parameters = new DialogParameters<KnowledgeGroupDialog> { { x => x.Record, record } };
        var options = new DialogOptions() { MaxWidth = MaxWidth.Large, FullWidth = true };

        var dialog = await DialogService.ShowAsync<KnowledgeGroupDialog>("Update knowledge base group", parameters, options);
        var result = await dialog.Result;

        if (result is { Canceled: false })
        {
            Loading = true;
            await LoadKnowledgeGroups();
        }
    }

    private async Task DeleteKnowledgeGroup(Guid id)
    {
        DialogParameters<ConfirmDialog> dialog = new()
        {
            { x => x.ContentText, $"Are you sure you want to delete this knowledge base group?" },
            { x => x.ActionButtonText, "Confirm" }
        };
        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };
        IDialogReference dialogRef = await DialogService.ShowAsync<ConfirmDialog>("Confirm", dialog, options);
        DialogResult dialogResult = await dialogRef.Result;

        if (!dialogResult.Canceled)
        {
            var result = await KnowledgeService.DeleteKnowledgeGroupAsync(id);
            if (result)
            {
                Snackbar.Add("Knowledge group deleted.", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error deleting knowledge group.", Severity.Error);
            }

            await LoadKnowledgeGroups();
        }
    }

    private void Close() => MudDialog?.Cancel();
}
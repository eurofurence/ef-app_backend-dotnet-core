@using Eurofurence.App.Backoffice.Services
@using Eurofurence.App.Domain.Model.Announcements
@using Eurofurence.App.Domain.Model.Images

@inject IImageService ImageService;
@inject IAnnouncementService AnnouncementService;
@inject ISnackbar Snackbar

<MudPaper Class="pa-4">
    <MudDialog>
        <DialogContent>
            <MudForm @ref="_form" @bind-IsValid="@_formIsValid">
                <MudTextField Class="mt-2" T="string" @bind-Value="request.Title" Required="true"
                    RequiredError="Name is required." Label="Title" />
                <MudTextField Class="mt-2" T="string" @bind-Value="request.Author" Required="true"
                    RequiredError="Name is required." Label="Author" />
                <MudTextField Class="mt-2" T="string" @bind-Value="request.Area" Required="true"
                    RequiredError="Name is required." Label="Area" />
                <MudTextField Class="mt-2" T="string" @bind-Value="request.Content" Required="true"
                    RequiredError="Name is required." Label="Content" />
                <MudGrid>
                    <MudItem xs="6">
                        <MudDatePicker Label="Start Date" Required="true" @bind-Date="_startDate" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTimePicker Label="Start Time" Required="true" @bind-Time="_startTime" />
                    </MudItem>
                </MudGrid>

                <MudGrid>
                    <MudItem xs="6">
                        <MudDatePicker Label="End Date" Required="true" @bind-Date="_endDate" />
                    </MudItem>
                    <MudItem xs="6">
                        <MudTimePicker Label="End Time" Required="true" @bind-Time="_endTime" />
                    </MudItem>
                </MudGrid>

                <MudTextField Label="Roles (comma seperated)" @bind-Value="_roles" />

                @if (request.ImageId != null)
                {
                    <MudText> ImageID: @request.ImageId.ToString()</MudText>
                }
                else
                {
                    <MudText> No image uploaded yet.</MudText>
                }
                <MudFileUpload T="IBrowserFile" FilesChanged="UploadImage">
                    <ActivatorContent>
                        <MudButton Class="mt-2" Variant="Variant.Filled" Color="Color.Primary"
                            StartIcon="@Icons.Material.Filled.CloudUpload">
                            Upload Image
                        </MudButton>
                    </ActivatorContent>
                </MudFileUpload>
            </MudForm>
            <MudImage Src="">
                @if (string.IsNullOrEmpty(@GetImageUrlAsync().Result))
                {
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                }
            </MudImage>
        </DialogContent>
        <DialogActions>
            @if (_roles == "")
            {
                <MudAlert Severity="Severity.Warning">You are about to send this announcement to all users.</MudAlert>
            }
            <MudButton Color="Color.Secondary" OnClick="OnClickedCancel">Cancel</MudButton>
            <MudButton Color="Color.Primary" Variant="Variant.Filled" Disabled="@submittionInProgress"
                OnClick="OnClickedSubmit">
                @if (submittionInProgress)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Submit</MudText>
                }
            </MudButton>
        </DialogActions>
    </MudDialog>
</MudPaper>

@code {

    #region Attributes
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    private DateTime? _startDate = DateTime.Now;
    private TimeSpan? _startTime = DateTime.Now.TimeOfDay;

    private DateTime? _endDate = DateTime.Now;
    private TimeSpan? _endTime = DateTime.Now.TimeOfDay;

    private string _roles = "";

    private bool _formIsValid;
    private MudForm _form;

    private AnnouncementRequest request = new AnnouncementRequest();

    private bool submittionInProgress;


    #endregion

    private async Task<string> GetImageUrlAsync()
    {
        if (!request.ImageId.HasValue)
        {
            return "";
        }
        ImageRecord image = (await ImageService.GetImageAsync((Guid)request.ImageId))!;
        return image.Url;
    }

    private async Task UploadImage(IBrowserFile? file)
    {
        if (file != null)
        {
            ImageRecord? image = await ImageService.PostImageAsync(file);
            if (image != null)
            {
                Snackbar.Add("Image added.", Severity.Success);
                request.ImageId = image.Id;
            }
            else
            {
                Snackbar.Add("Error adding image.", Severity.Error);
            }
        }
        StateHasChanged();
    }

    protected override void OnInitialized() { }
    private void OnClickedCancel()
    {
        if (request.ImageId != null)
        {
            // Delete otherwise dangling image.
            ImageService.DeleteImageAsync((Guid)request.ImageId);
        }
        MudDialog?.Close(DialogResult.Cancel());
    }
    private async Task OnClickedSubmit(MouseEventArgs obj)
    {
        await _form.Validate();

        if (!_formIsValid)
        {
            Snackbar.Add("Form is invalid. Please check the validation errors.", Severity.Error);
            return;
        }
        DateTime startDateTime = _startDate.Value.Date + _startTime.Value;
        DateTime endDateTime = _endDate.Value.Date + _endTime.Value;
        if (endDateTime <= startDateTime)
        {
            Snackbar.Add("End date/time must be after start date/time.", Severity.Error);
            return;
        }
        request.ValidFromDateTimeUtc = startDateTime.ToUniversalTime();
        request.ValidUntilDateTimeUtc = endDateTime.ToUniversalTime();
        request.Roles = _roles
        .Split(",")
        .Select(role => role.Trim())
        .Where(role => role != "")
        .ToList();

        submittionInProgress = true;
        await AnnouncementService.SubmitAnnouncementAsync(request);
        submittionInProgress = false;
        Snackbar.Add("Announcement successfully submitted", Severity.Success);
        MudDialog?.Close(DialogResult.Ok(request));
    }
}

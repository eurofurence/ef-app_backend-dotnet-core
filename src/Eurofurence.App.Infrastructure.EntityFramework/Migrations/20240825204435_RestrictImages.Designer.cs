// <auto-generated />
using System;
using Eurofurence.App.Infrastructure.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Eurofurence.App.Infrastructure.EntityFramework.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240825204435_RestrictImages")]
    partial class RestrictImages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Announcements.AnnouncementRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ValidFromDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("ValidUntilDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtShow.AgentClosingResultRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("AgentBadgeNo")
                        .HasColumnType("int");

                    b.Property<string>("AgentName")
                        .HasColumnType("longtext");

                    b.Property<string>("ArtistName")
                        .HasColumnType("longtext");

                    b.Property<int>("ExhibitsSold")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitsToAuction")
                        .HasColumnType("int");

                    b.Property<int>("ExhibitsUnsold")
                        .HasColumnType("int");

                    b.Property<DateTime>("ImportDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImportHash")
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NotificationDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OwnerUid")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PrivateMessageId")
                        .HasColumnType("char(36)");

                    b.Property<decimal>("TotalCashAmount")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("Id");

                    b.ToTable("AgentClosingResults");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtShow.ItemActivityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("ASIDNO")
                        .HasColumnType("int");

                    b.Property<string>("ArtPieceTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("ArtistName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ImportDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImportHash")
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("NotificationDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OwnerUid")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PrivateMessageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ItemActivitys");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtistsAlley.TableRegistrationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DisplayName")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Location")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerUid")
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerUsername")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext");

                    b.Property<int>("State")
                        .HasColumnType("int");

                    b.Property<string>("TelegramHandle")
                        .HasColumnType("longtext");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("TableRegistrations");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtistsAlley.TableRegistrationRecord+StateChangeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ChangedByUid")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ChangedDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("NewState")
                        .HasColumnType("int");

                    b.Property<int>("OldState")
                        .HasColumnType("int");

                    b.Property<Guid?>("TableRegistrationRecordId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("TableRegistrationRecordId");

                    b.ToTable("StateChangeRecord");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.CollectionGame.CollectionEntryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("EventDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid>("FursuitParticipationId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("FursuitParticipationRecordId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlayerParticipationId")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PlayerParticipationRecordId")
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.HasIndex("FursuitParticipationRecordId");

                    b.HasIndex("PlayerParticipationRecordId");

                    b.ToTable("CollectionEntries");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Communication.PrivateMessageRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AuthorName")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ReadDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ReceivedDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RecipientIdentityId")
                        .HasColumnType("longtext");

                    b.Property<string>("RecipientRegSysId")
                        .HasColumnType("longtext");

                    b.Property<string>("SenderUid")
                        .HasColumnType("longtext");

                    b.Property<string>("Subject")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PrivateMessages");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Dealers.DealerRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("AboutTheArtText")
                        .HasColumnType("longtext");

                    b.Property<string>("AboutTheArtistText")
                        .HasColumnType("longtext");

                    b.Property<string>("ArtPreviewCaption")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ArtPreviewImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ArtistImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("ArtistThumbnailImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("AttendeeNickname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("AttendsOnFriday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AttendsOnSaturday")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("AttendsOnThursday")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("BlueskyHandle")
                        .HasColumnType("longtext");

                    b.Property<string>("Categories")
                        .HasColumnType("longtext");

                    b.Property<string>("DiscordHandle")
                        .HasColumnType("longtext");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<bool>("IsAfterDark")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<string>("Keywords")
                        .HasColumnType("json");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MastodonHandle")
                        .HasColumnType("longtext");

                    b.Property<string>("Merchandise")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("RegistrationNumber")
                        .HasColumnType("int");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("TelegramHandle")
                        .HasColumnType("longtext");

                    b.Property<string>("TwitterHandle")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ArtPreviewImageId");

                    b.HasIndex("ArtistImageId");

                    b.HasIndex("ArtistThumbnailImageId");

                    b.ToTable("Dealers");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventConferenceDayRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EventConferenceDays");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventConferenceRoomRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("ShortName")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EventConferenceRooms");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventConferenceTrackRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("EventConferenceTracks");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventFeedbackRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("EventFeedbacks");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Abstract")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("BannerImageId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConferenceDayId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConferenceRoomId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("ConferenceTrackId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<TimeSpan>("Duration")
                        .HasColumnType("time(6)");

                    b.Property<DateTime>("EndDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(6)");

                    b.Property<bool>("IsAcceptingFeedback")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeviatingFromConBook")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PanelHosts")
                        .HasColumnType("longtext");

                    b.Property<Guid?>("PosterImageId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Slug")
                        .HasColumnType("longtext");

                    b.Property<int>("SourceEventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(6)");

                    b.Property<string>("SubTitle")
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("BannerImageId");

                    b.HasIndex("ConferenceDayId");

                    b.HasIndex("ConferenceRoomId");

                    b.HasIndex("ConferenceTrackId");

                    b.HasIndex("PosterImageId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fragments.LinkFragment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid?>("DealerRecordId")
                        .HasColumnType("char(36)");

                    b.Property<int>("FragmentType")
                        .HasColumnType("int");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<Guid?>("KnowledgeEntryRecordId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("MapEntryRecordId")
                        .HasColumnType("char(36)");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Target")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("DealerRecordId");

                    b.HasIndex("KnowledgeEntryRecordId");

                    b.HasIndex("MapEntryRecordId");

                    b.ToTable("LinkFragments");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.FursuitParticipationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CollectionCount")
                        .HasColumnType("int");

                    b.Property<Guid>("FursuitBadgeId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastCollectionDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("OwnerUid")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("TokenRegistrationDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("TokenValue")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FursuitParticipations");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.PlayerParticipationRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("CollectionCount")
                        .HasColumnType("int");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<int>("Karma")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LastCollectionDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("PlayerUid")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("PlayerParticipations");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.TokenRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsLinked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LinkDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<Guid?>("LinkedFursuitParticipantUid")
                        .HasColumnType("char(36)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Tokens");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.FursuitBadgeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("CollectionCode")
                        .HasColumnType("longtext");

                    b.Property<string>("ExternalReference")
                        .HasColumnType("longtext");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("OwnerUid")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("WornBy")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("FursuitBadges");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Images.ImageRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("ContentHashSha1")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("InternalFileName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InternalReference")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<bool>("IsRestricted")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<long>("SizeInBytes")
                        .HasColumnType("bigint");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Knowledge.KnowledgeEntryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<Guid>("KnowledgeGroupId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeGroupId");

                    b.ToTable("KnowledgeEntries");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Knowledge.KnowledgeGroupRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("FontAwesomeIconName")
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<bool>("ShowInHamburgerMenu")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("Id");

                    b.ToTable("KnowledgeGroups");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.LostAndFound.LostAndFoundRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<int>("ExternalId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("FoundDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("LostDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime?>("ReturnDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("LostAndFounds");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Maps.MapEntryRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<Guid>("MapId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TapRadius")
                        .HasColumnType("int");

                    b.Property<int>("X")
                        .HasColumnType("int");

                    b.Property<int>("Y")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MapId");

                    b.ToTable("MapEntries");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Maps.MapRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<Guid?>("ImageId")
                        .HasColumnType("char(36)");

                    b.Property<bool>("IsBrowseable")
                        .HasColumnType("tinyint(1)");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ImageId");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.PushNotifications.DeviceIdentityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("DeviceToken")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("DeviceType")
                        .HasColumnType("int");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("DeviceIdentities");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.PushNotifications.RegistrationIdentityRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("IdentityId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("RegSysId")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("RegistrationIdentities");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Sync.EntityStorageInfoRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime>("DeltaStartDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EntityType")
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("EntityStorageInfos");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Telegram.UserRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Acl")
                        .HasColumnType("longtext");

                    b.Property<int>("IsDeleted")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastChangeDateTimeUtc")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Username")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ImageRecordKnowledgeEntryRecord", b =>
                {
                    b.Property<Guid>("ImagesId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("KnowledgeEntriesId")
                        .HasColumnType("char(36)");

                    b.HasKey("ImagesId", "KnowledgeEntriesId");

                    b.HasIndex("KnowledgeEntriesId");

                    b.ToTable("ImageRecordKnowledgeEntryRecord");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Announcements.AnnouncementRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "Image")
                        .WithMany("Announcements")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtistsAlley.TableRegistrationRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "Image")
                        .WithMany("TableRegistrations")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtistsAlley.TableRegistrationRecord+StateChangeRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.ArtistsAlley.TableRegistrationRecord", null)
                        .WithMany("StateChangeLog")
                        .HasForeignKey("TableRegistrationRecordId");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.CollectionGame.CollectionEntryRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.FursuitParticipationRecord", null)
                        .WithMany("CollectionEntries")
                        .HasForeignKey("FursuitParticipationRecordId");

                    b.HasOne("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.PlayerParticipationRecord", null)
                        .WithMany("CollectionEntries")
                        .HasForeignKey("PlayerParticipationRecordId");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Dealers.DealerRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "ArtPreviewImage")
                        .WithMany("DealerArtPreviews")
                        .HasForeignKey("ArtPreviewImageId");

                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "ArtistImage")
                        .WithMany("DealerArtists")
                        .HasForeignKey("ArtistImageId");

                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "ArtistThumbnailImage")
                        .WithMany("DealerArtistThumbnails")
                        .HasForeignKey("ArtistThumbnailImageId");

                    b.Navigation("ArtPreviewImage");

                    b.Navigation("ArtistImage");

                    b.Navigation("ArtistThumbnailImage");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventFeedbackRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Events.EventRecord", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "BannerImage")
                        .WithMany("EventBanners")
                        .HasForeignKey("BannerImageId");

                    b.HasOne("Eurofurence.App.Domain.Model.Events.EventConferenceDayRecord", "ConferenceDay")
                        .WithMany("Events")
                        .HasForeignKey("ConferenceDayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eurofurence.App.Domain.Model.Events.EventConferenceRoomRecord", "ConferenceRoom")
                        .WithMany("Events")
                        .HasForeignKey("ConferenceRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eurofurence.App.Domain.Model.Events.EventConferenceTrackRecord", "ConferenceTrack")
                        .WithMany("Events")
                        .HasForeignKey("ConferenceTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "PosterImage")
                        .WithMany("EventPosters")
                        .HasForeignKey("PosterImageId");

                    b.Navigation("BannerImage");

                    b.Navigation("ConferenceDay");

                    b.Navigation("ConferenceRoom");

                    b.Navigation("ConferenceTrack");

                    b.Navigation("PosterImage");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fragments.LinkFragment", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Dealers.DealerRecord", null)
                        .WithMany("Links")
                        .HasForeignKey("DealerRecordId");

                    b.HasOne("Eurofurence.App.Domain.Model.Knowledge.KnowledgeEntryRecord", null)
                        .WithMany("Links")
                        .HasForeignKey("KnowledgeEntryRecordId");

                    b.HasOne("Eurofurence.App.Domain.Model.Maps.MapEntryRecord", null)
                        .WithMany("Links")
                        .HasForeignKey("MapEntryRecordId");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.FursuitBadgeRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "Image")
                        .WithMany("FursuitBadges")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Knowledge.KnowledgeEntryRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Knowledge.KnowledgeGroupRecord", "KnowledgeGroup")
                        .WithMany("KnowledgeEntries")
                        .HasForeignKey("KnowledgeGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KnowledgeGroup");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Maps.MapEntryRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Maps.MapRecord", "Map")
                        .WithMany("Entries")
                        .HasForeignKey("MapId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Map");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Maps.MapRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", "Image")
                        .WithMany("Maps")
                        .HasForeignKey("ImageId");

                    b.Navigation("Image");
                });

            modelBuilder.Entity("ImageRecordKnowledgeEntryRecord", b =>
                {
                    b.HasOne("Eurofurence.App.Domain.Model.Images.ImageRecord", null)
                        .WithMany()
                        .HasForeignKey("ImagesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Eurofurence.App.Domain.Model.Knowledge.KnowledgeEntryRecord", null)
                        .WithMany()
                        .HasForeignKey("KnowledgeEntriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.ArtistsAlley.TableRegistrationRecord", b =>
                {
                    b.Navigation("StateChangeLog");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Dealers.DealerRecord", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventConferenceDayRecord", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventConferenceRoomRecord", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Events.EventConferenceTrackRecord", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.FursuitParticipationRecord", b =>
                {
                    b.Navigation("CollectionEntries");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Fursuits.CollectingGame.PlayerParticipationRecord", b =>
                {
                    b.Navigation("CollectionEntries");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Images.ImageRecord", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("DealerArtPreviews");

                    b.Navigation("DealerArtistThumbnails");

                    b.Navigation("DealerArtists");

                    b.Navigation("EventBanners");

                    b.Navigation("EventPosters");

                    b.Navigation("FursuitBadges");

                    b.Navigation("Maps");

                    b.Navigation("TableRegistrations");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Knowledge.KnowledgeEntryRecord", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Knowledge.KnowledgeGroupRecord", b =>
                {
                    b.Navigation("KnowledgeEntries");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Maps.MapEntryRecord", b =>
                {
                    b.Navigation("Links");
                });

            modelBuilder.Entity("Eurofurence.App.Domain.Model.Maps.MapRecord", b =>
                {
                    b.Navigation("Entries");
                });
#pragma warning restore 612, 618
        }
    }
}
